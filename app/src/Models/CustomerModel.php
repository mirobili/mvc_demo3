<?php

namespace App\Models;

use App\Entities\Customer;
use App\Framework\Model;
use App\Storage\Storage;

class CustomerModel extends Model
{
    private $customer = null;
    private $contracts =[];
    private $collections =[];

    private $references=[];
    private $customerRepository = null;

    protected static array $relations = [
        "contract" => [
            'type' => 'hasMany'
            , 'local' => 'id'
            , 'references' => 'App\Entities\Contract.customer_id'
        ]
    ];


    public function loadRelations($key= null)
    {
        // parent::loadRelations(); // TODO: Change the autogenerated stub

//        protected static array $relations = [
//            "contracts" => [
//                'type' => 'hasMany'
//                , 'local' => 'id'
//                , 'references' => 'App\Entities\Contract.customer_id'
//            ]
//        ];

        foreach (static::$relations as $name => $rel) {


            if($key && $key !== $name){
                continue;
            }
            $rel = (object)$rel;
            $ref = explode('.', $rel->references);
            $class = $ref[0];
            $field = $ref[1];

            $local_field = $rel->local;
            $getter = 'get' . ucfirst($local_field);

            switch ($rel->type) {
                case 'hasOne':
                    $this->references[$name] = Storage::find($class, [$field => $this->$getter()]);
                    break;
                case 'hasMany':
                default:
                    //$this->references[$name] = Storage::find($class, [$field => $this->$getter()]);
                    return Storage::find($class, [$field => $this->$getter()]);
                    break;

            }

        }

    }


//

//
//
//    public function getContracts(){
//        if(!isset($this->collections['contract']))
//            $this->collections['contract']= $this->loadRelations('contracts');
//        return $this->collections['contract'];
//    }

    function get($id){
        return Storage::findByID(Customer::class, $id);
//        $this->loadRelations();
//        // $this->contracts = $this->customer->getContracts();
//        $this->loadRelations('contracts');
    }


    function save(){
        $this->customer->save();
        $this->customerRepository->get($this->customer);
        foreach ($this->contracts as $contract){
            $contract->save();
        }
    }

}